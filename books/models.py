from django.db import models
from datetime import date
from iam.models import Student, UserProfile
from subscription.models import StudentSubscription, SubscriptionPlan  


# üîπ Author model
class Author(models.Model):
    name = models.CharField(max_length=100)  # ‡§≤‡•á‡§ñ‡§ï‡§æ‡§ö‡•á ‡§®‡§æ‡§µ

    def __str__(self):
        return self.name


# üîπ Book Category
class Category(models.Model):
    name = models.CharField(max_length=100, unique=True)  # Category name
    location = models.CharField(max_length=100)  # Library rack/section

    def __str__(self):
        return self.name


# üîπ Book Info
class Book(models.Model):
    title = models.CharField(max_length=200)  # ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§ö‡§Ç ‡§®‡§æ‡§µ
    authors = models.ManyToManyField(Author)  # ‡§≤‡•á‡§ñ‡§ï‡§æ‡§Ç‡§ö‡•Ä ‡§Ø‡§æ‡§¶‡•Ä
    isbn = models.CharField(max_length=13, unique=True)  # Unique ISBN
    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)
    description = models.TextField()  # ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§ö‡•Ä ‡§Æ‡§æ‡§π‡§ø‡§§‡•Ä
    published_date = models.DateField()  # ‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§® ‡§§‡§æ‡§∞‡•Ä‡§ñ
    recommended = models.BooleanField(default=False)  # ‡§∂‡§ø‡§´‡§æ‡§∞‡§∏‡•Ä‡§§ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï?
    allowed_in_plans = models.ManyToManyField(SubscriptionPlan, blank=True)  # ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§Ø‡§æ ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§≤‡§æ ‡§™‡§∞‡§µ‡§æ‡§®‡§ó‡•Ä ‡§¶‡•á‡§§‡§æ‡§§

    def __str__(self):
        return self.title

    # ‚úÖ ‡§®‡§µ‡•Ä‡§® METHOD - ‡§â‡§™‡§≤‡§¨‡•ç‡§ß copies count ‡§ï‡§∞‡§§‡•á
    def available_copies_count(self):
        """
        ‚úÖ ‡§Ø‡§æ method ‡§®‡•á ‡§™‡•Å‡§∏‡•ç‡§§‡§ï‡§æ‡§ö‡•ç‡§Ø‡§æ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß copies count ‡§π‡•ã‡§§‡§æ‡§§.
        ‡§Æ‡•ç‡§π‡§£‡§ú‡•á‡§ö status = 'available' ‡§Ö‡§∏‡§≤‡•á‡§≤‡•ç‡§Ø‡§æ BookCopy objects ‡§ö‡•Ä count.
        """
        return self.bookcopy_set.filter(status='available').count()


# üîπ Book Copies
class BookCopy(models.Model):
    STATUS_CHOICES = [
        ('available', 'Available'),
        ('borrowed', 'Borrowed'),
        ('lost', 'Lost'),
        ('damaged', 'Damaged'),
    ]

    book = models.ForeignKey(Book, on_delete=models.CASCADE)  # ‡§™‡•Å‡§∏‡•ç‡§§‡§ï ‡§∏‡§Ç‡§¶‡§∞‡•ç‡§≠
    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='available')  # ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏
    copy_id = models.CharField(max_length=30, unique=True, default='default_copy')  # ‚úÖ Unique ID for each copy
    library_location = models.CharField(max_length=100, default='Main Branch')  # ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ ‡§∂‡§æ‡§ñ‡•á‡§§ ‡§Ü‡§π‡•á?

    def __str__(self):
        return f"{self.book.title} - {self.copy_id} - {self.status}"


# üîπ Borrow Record
class BorrowRecord(models.Model):
    student = models.ForeignKey(Student, on_delete=models.CASCADE)  # ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§®‡•á ‡§ò‡•á‡§§‡§≤‡§Ç
    book_copy = models.ForeignKey(BookCopy, on_delete=models.CASCADE)  # ‡§ï‡•ã‡§£‡§§‡•Ä ‡§ï‡•â‡§™‡•Ä ‡§ò‡•á‡§§‡§≤‡•Ä
    borrow_date = models.DateField(auto_now_add=True)  # ‡§ú‡•á‡§µ‡•ç‡§π‡§æ ‡§ò‡•á‡§§‡§≤‡§Ç
    due_date = models.DateField()  # ‡§™‡§∞‡§§ ‡§ï‡§∞‡§£‡•ç‡§Ø‡§æ‡§ö‡•Ä ‡§∂‡•á‡§µ‡§ü‡§ö‡•Ä ‡§§‡§æ‡§∞‡•Ä‡§ñ
    return_date = models.DateField(null=True, blank=True)  # ‡§™‡§∞‡§§ ‡§ï‡•á‡§≤‡§Ç ‡§ï‡§æ?

    def __str__(self):
        return f"{self.student.user_profile.user.username} - {self.book_copy.book.title}"

    def is_late(self):
        return self.return_date and self.return_date > self.due_date

    def get_fine_amount(self):
        """
        ‚úÖ ‡§â‡§∂‡§ø‡§∞ ‡§ù‡§æ‡§≤‡•ç‡§Ø‡§æ‡§∏ ‡§´‡§æ‡§á‡§® ‡§ï‡§∏‡§æ ‡§≤‡§æ‡§ó‡•á‡§≤ ‡§π‡•á calculate ‡§ï‡§∞‡§§‡§Ç.
        """
        if self.return_date and self.return_date > self.due_date:
            late_days = (self.return_date - self.due_date).days
            try:
                subscription = StudentSubscription.objects.filter(student=self.student).last()
                if subscription:
                    fine_rate = subscription.plan.fine_per_day
                    return late_days * fine_rate
            except StudentSubscription.DoesNotExist:
                pass
            return late_days * 10  # ‡§ú‡§∞ ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§®‡§∏‡•á‡§≤, default ‚Çπ10 per day
        return 0

    def fine_rate(self):
        """
        ‡§™‡•ç‡§∞‡§§‡•ç‡§Ø‡•á‡§ï ‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•ç‡§Ø‡§æ‡§ö‡•ç‡§Ø‡§æ subscription plan ‡§®‡•Å‡§∏‡§æ‡§∞ ‡§™‡•ç‡§∞‡§§‡§ø ‡§¶‡§ø‡§µ‡§∏ ‡§¶‡§Ç‡§° ‡§™‡§∞‡§§ ‡§ï‡§∞‡§§‡•ã.
        """
        try:
            subscription = StudentSubscription.objects.filter(student=self.student).last()
            if subscription:
                return subscription.plan.fine_per_day
        except StudentSubscription.DoesNotExist:
            return 10
        return 10


# üîπ Fine Model
class Fine(models.Model):
    borrow_record = models.OneToOneField(
        BorrowRecord,
        on_delete=models.CASCADE,
        related_name='book_fine'
    )  # ‡§è‡§ï‡§ö ‡§´‡§æ‡§á‡§® ‡§è‡§ï‡§æ record ‡§≤‡§æ
    amount = models.DecimalField(max_digits=6, decimal_places=2)  # ‡§∞‡§ï‡•ç‡§ï‡§Æ
    paid = models.BooleanField(default=False)  # ‡§≠‡§∞‡§≤‡•á ‡§Ü‡§π‡•á ‡§ï‡§æ?

    def __str__(self):
        return f"{self.borrow_record} - ‚Çπ{self.amount}"
